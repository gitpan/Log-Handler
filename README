NAME
    Log::Handler - Log messages to one or more outputs.

SYNOPSIS
        use Log::Handler;

        my $log = Log::Handler->new();

        $log->add(file => {
            filename => 'file.log',
            mode     => 'append',
            maxlevel => 'debug',
            minlevel => 'warning',
            newline  => 1,
        });

        $log->alert("foo bar");

DESCRIPTION
    This module is just a simple object oriented log handler and very easy
    to use. It's possible to define a log level for your programs and
    control the amount of informations that are logged to one or more
    outputs.

LOG LEVELS
    There are eigth levels available:

        7   debug
        6   info
        5   notice
        4   warning
        3   error, err
        2   critical, crit
        1   alert
        0   emergency, emerg

    "debug" is the highest and "emergency" is the lowest level.

METHODS
  new()
    Call "new()" to create a new log handler object.

        my $log = Log::Handler->new();

  add()
    Call "add()" to add a new output object.

    The following options are possible for the handler:

    maxlevel and minlevel
        With these options it's possible to set the log levels for your
        program.

        Example:

            maxlevel => 'error'
            minlevel => 'emergency'

            # or

            maxlevel => 'err'
            minlevel => 'emerg'

            # or

            maxlevel => 3
            minlevel => 0

        It's possible to set the log level as string or as number. The
        default setting for "maxlevel" is "warning" and the default setting
        for "minlevel" is "emergency".

        Example: If "maxlevel" is set to "warning" and "minlevel" to
        "emergency" then the levels "warning", "error", "critical", "alert"
        and "emergency" would be logged.

        You can set both to 8 or "nothing" if you want to disable the
        logging machine.

    timeformat
        The "timeformat" is used for the placeholder %T. You can set
        "timeformat" with a date and time format that is converted with
        "POSIX::strftime". The default format is "%b %d %H:%M:%S" and looks
        like

            Feb 01 12:56:31

        As example the format "%Y/%m/%d %H:%M:%S" would looks like

            2007/02/01 12:56:31

    dateformat
        The same like "timeformat". It's useful if you want to split the
        date and time:

            $log->add(file => {
                filename       => 'file.log',
                dateformat     => '%Y-%m-%d',
                timeformat     => '%H:%M:%S',
                message_layout => '%D %T %L %m',
            });

            $log->error("an error here");

        Would log

            2007-02-01 12:56:31 ERROR an error here

        This option is not used on default.

    newline
        This helpful option appends a newline to the output message if a
        newline not exist.

            0 - disable (default)
            1 - enable - appends a newline to the log message if not exist

    message_layout
        With this option you can define your own message layout with
        different placeholders in "printf()" style. The available
        placeholders are:

            %L   Log level
            %T   Time or full timestamp (option timeformat)
            %D   Date (option dateformat)
            %P   PID
            %H   Hostname
            %N   Newline
            %C   Caller - filename and line number
            %p   Program name
            %t   Time measurement - replaced with the time since the last call of the handler
            %m   The message.

        The default message layout is set to "%T [%L] %m".

        As example the following code

            $log->alert("foo bar");

        would log

            Feb 01 12:56:31 [ALERT] foo bar

        If you set "message_layout" to

            message_layout => '%T foo %L bar %m (%C)'

        and call

            $log->info("baz");

        then it would log

            Feb 01 12:56:31 foo INFO bar baz (script.pl, line 40)

        Traces will be appended after the complete message.

        You can create your own placeholders with the method
        "set_pattern()".

        Placeholders are documented in the section "PLACEHOLDER".

    message_pattern
        This option is just useful if you want to forward messages with
        Log::Handler::Output::Forward or insert the message with
        Log::Handler::Output::DBI or dump messages to the screen with
        Log::Handler::Output::Screen.

        Possible placeholders:

            %L   level
            %T   time
            %D   date
            %P   pid
            %H   hostname
            %N   newline
            %C   caller
            %p   progname
            %t   mtime
            %m   message

        The option expects a array reference with a list of placeholders:

            message_pattern => [ qw/%T %L %H %m/ ]

        The patterns are replaced with the pattern names as hash keys and
        the hash is passed as reference to the output. Here a full code
        example:

            use Log::Handler;

            my $log = Log::Handler->new();

            $log->add(forward => {
                forward_to      => \&my_func,
                message_pattern => [ qw/%T %L %H/ ],
                message_layout  => '%m',
                maxlevel        => 'info',
            });

            $log->info('a forwarded message');

            # now you can access it

            sub my_func {
                my $params = shift;
                print "Timestamp: $params->{time}\n";
                print "Level:     $params->{level}\n";
                print "Hostname:  $params->{hostname}\n";
                print "Message:   $params->{message}\n";
            }

    priority
        With this option you can set the priority of your output objects.
        This means that messages will be logged at first to the outputs with
        a higher priority. If this option is not set then the default
        priority begins with 10 and will be increased +1 with each output.
        Example...

        We add a output with no priority

            $log->add(file => { filename => 'file.log' });

        This output gets the priority of 10. Now we add another output

            $log->add(file => { filename => 'file.log' });

        This output gets the priority of 11... and so on.

        Messages would be logged at first to priority 10 and then 11. Now
        you can add another output and set the priority to 1.

            $log->add(screen => { dump => 1, priority => 1 });

        Messages would be logged now at first to the screen.

    die_on_errors
        Set "die_on_errors" to 0 if you don't want that the handler die on
        failed write operations.

            0 - will not die on errors
            1 - will die (e.g. croak) on errors

        If you set "die_on_errors" to 0 then you have to controll it
        yourself.

            $log->info('info message') or die $log->errstr();

            # or Log::Handler->errstr()
            # or Log::Handler::errstr()
            # or $Log::Handler::ERRSTR

    debug_trace
        You can activate a debugger that writes "caller()" informations for
        each log level that would logged. The debugger is logging all
        defined values except "hints" and "bitmask". Set "debug_trace" to 1
        to activate the debugger. The debugger is set to 0 by default.

    debug_mode
        There are two debug modes: line(1) and block(2) mode. The default
        mode is 1.

        The block mode looks like this:

            use strict;
            use warnings;
            use Log::Handler;

            my $log = Log::Handler->new()

            $log->add(file => {
                filename    => '*STDOUT',
                maxlevel    => 'debug',
                debug_trace => 1,
                debug_mode  => 1
            });

            sub test1 { $log->warning() }
            sub test2 { &test1; }

            &test2;

        Output:

            Apr 26 12:54:11 [WARN] 
               CALL(4): package(main) filename(./trace.pl) line(15) subroutine(main::test2) hasargs(0)
               CALL(3): package(main) filename(./trace.pl) line(13) subroutine(main::test1) hasargs(0)
               CALL(2): package(main) filename(./trace.pl) line(12) subroutine(Log::Handler::__ANON__) hasargs(1)
               CALL(1): package(Log::Handler) filename(/usr/local/share/perl/5.8.8/Log/Handler.pm) line(713) subroutine(Log::Handler::_write) hasargs(1)
               CALL(0): package(Log::Handler) filename(/usr/local/share/perl/5.8.8/Log/Handler.pm) line(1022) subroutine(Devel::Backtrace::new) hasargs(1) wantarray(0)

        The same code example but the debugger in block mode would looks
        like this:

               debug_mode => 2

        Output:

           Apr 26 12:52:17 [DEBUG] 
              CALL(4):
                 package     main
                 filename    ./trace.pl
                 line        15
                 subroutine  main::test2
                 hasargs     0
              CALL(3):
                 package     main
                 filename    ./trace.pl
                 line        13
                 subroutine  main::test1
                 hasargs     0
              CALL(2):
                 package     main
                 filename    ./trace.pl
                 line        12
                 subroutine  Log::Handler::__ANON__
                 hasargs     1
              CALL(1):
                 package     Log::Handler
                 filename    /usr/local/share/perl/5.8.8/Log/Handler.pm
                 line        681
                 subroutine  Log::Handler::_write
                 hasargs     1
              CALL(0):
                 package     Log::Handler
                 filename    /usr/local/share/perl/5.8.8/Log/Handler.pm
                 line        990
                 subroutine  Devel::Backtrace::new
                 hasargs     1
                 wantarray   0

    debug_skip
        This option let skip the "caller()" informations the count of
        "debug_skip".

            debug_skip => 2

            Apr 26 12:55:07 [DEBUG] 
               CALL(2): package(main) filename(./trace.pl) line(16) subroutine(main::test2) hasargs(0)
               CALL(1): package(main) filename(./trace.pl) line(14) subroutine(main::test1) hasargs(0)
               CALL(0): package(main) filename(./trace.pl) line(13) subroutine(Log::Handler::__ANON__) hasargs(1)

  How to use add()
    The method "add()" excepts 2 option parts; the options for the handler
    and for the output module you want to use - the output modules got it's
    own documentation for all options.

    There are different ways to add a new output to the handler. The one way
    is that you create the output object yourself and pass it with the
    handler options to "add()".

    Example:

        use Log::Handler;
        use Log::Handler::Output::File;

        # the handler options - how to handle the output
        my %handler_options = (
            timeformat      => '%Y/%m/%d %H:%M:%S',
            newline         => 1,
            message_layout  => '%T [%L] %S: %m',
            maxlevel        => 'debug',
            minlevel        => 'emergency',
            die_on_errors   => 1,
            debug_trace     => 0,
            debug_mode      => 2,
            debug_skip      => 0,
        );

        # the file options - how to handle the file
        my %file_options = (
            filename        => 'file.log',
            filelock        => 1,
            fileopen        => 1,
            reopen          => 1,
            mode            => 'append',
            autoflush       => 1,
            permissions     => '0660',
            utf8            => 1,
        );

        # we creating the file object
        my $file = Log::Handler::Output::File->new( \%file_options );

        # creating a new handler object
        my $log = Log::Handler->new();

        # now we add the file object to the handler with the handler options
        $log->add( $file => \%handler_options );

    But it can be simplier! You can merge all options and pass them to
    "add()" in one step, you just need to tell the handler what do you want
    to add.

        # merge the options
        my %all_options = (%output_options, %file_options);

        # pass all options and say what you want to add -> a file!
        $log->add( file => \%all_options );

    The options will be splitted intern and you don't need to split it
    yourself, only if you want to do it yourself.

    Further examples:

        $log->add( email   => \%all_options );
        $log->add( forward => \%all_options );
        # and so on ...

    Take a look to the section "EXAMPLES" for more informations.

  Log level methods
    debug()
    info()
    notice()
    warning()
    error(), err()
    critical(), crit()
    alert()
    emergency(), emerg()

    The call of a log level method is very simple:

        $log->info("Hello World! How are you?");

    Or maybe:

        $log->info("Hello World!", "How are you?");

    Both calls would log - if the level INFO is active:

        Feb 01 12:56:31 [INFO] Hello World! How are you?

  is_* methods
    is_debug()
    is_info()
    is_notice()
    is_warning()
    is_error(), is_err()
    is_critical(), is_crit()
    is_alert()
    is_emergency(), is_emerg()

    These thirteen methods could be very useful if you want to kwow if the
    current log level would output the message. All methods returns TRUE if
    the current set of "minlevel" and "maxlevel" would log the message and
    FALSE if not. Example:

        $log->debug(Dumper(\%hash));

    This example would dump the hash in any case and pass it to the log
    handler, but that is not that what we really want!

        if ( $log->is_debug ) {
            $log->debug(Dumper(\%hash));
        }

    Now we dump the hash only if the current log level would log it.

    The methods "is_err()", "is_crit()" and "is_emerg()" are just shortcuts.

  Other level methods
    There exists a lot of other level methods.

    For a full list take a look into the documentation of
    Log::Handler::Levels.

  errstr()
    Call "errstr()" if you want to get the last error message. This is
    useful with "die_on_errors". If you set "die_on_errors" to 0 the handler
    wouldn't croak on failed write operations. Set "die_on_errors" to
    control it yourself.

        use Log::Handler;

        my $log = Log::Handler->new();

        $log->add(file => {
            filename      => 'file.log',
            maxlevel      => 'info',
            mode          => 'append',
            die_on_errors => 0,
        });

        $log->info("Hello World!") or die $log->errstr;

    Or

        unless ( $log->info("Hello World!") ) {
            $error_string = $log->errstr;
            # do something with $error_string
        }

    The exception is that the handler croaks in any case if the call of
    "new()" or "add()" fails because on missing or wrong settings!

  config()
    With this method it's possible to load your output configuration from a
    file.

        $log->config(filename => 'file.conf');

    Or

        $log->config(config => {
            file => {
                default => {
                    newline       => 1,
                    debug_mode    => 2,
                    die_on_errors => 0
                },
                error_log => {
                    filename      => 'error.log',
                    maxlevel      => 'warning',
                    minlevel      => 'emerg',
                    priority      => 1
                },
                common_log => {
                    filename      => 'common.log',
                    maxlevel      => 'info',
                    minlevel      => 'emerg',
                    priority      => 2
                },
            }
        });

    The default section - I call it section here - can be used to define
    default parameters for all file outputs.

    Take a look into the documentation of Log::Handler::Config for more
    informations.

  set_pattern()
    With this option you can set your own placeholders. Example:

        $log->set_pattern('%X', 'name', sub { });

        # or

        $log->set_pattern('%X', 'name', 'value');

    Then you can use this pattern in your message layout:

        $log->add(forward => {
            filename        => 'file.log',
            message_layout  => '%X %m',
        });

EXAMPLES
    Log::Handler::Examples

EXTENSIONS
    Start it or write me a mail if you have questions.

PREREQUISITES
    Prerequisites for all modules:

        Carp
        Data::Dumper
        Devel::Backtrace
        Fcntl
        Net::SMTP
        Params::Validate
        POSIX
        Time::HiRes
        Sys::Hostname
        UNIVERSAL::require

    And maybe for the config loader:

        Config::General
        Config::Properties
        YAML

    Just for the test suite:

        File::Spec
        Test::More

EXPORTS
    No exports.

REPORT BUGS
    Please report all bugs to <jschulz.cpan(at)bloonix.de>.

AUTHOR
    Jonny Schulz <jschulz.cpan(at)bloonix.de>.

QUESTIONS
    Do you have any questions or ideas?

    MAIL: <jschulz.cpan(at)bloonix.de>

    IRC: irc.perl.org#perl

    If you send me a mail then add Log::Handler into the subject.

TODO
    Maybe; don't know

        * Log::Handler::Output::Socket

COPYRIGHT
    Copyright (C) 2007 by Jonny Schulz. All rights reserved.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

DISCLAIMER OF WARRANTY
    BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
    FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
    OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
    PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
    EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
    ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
    YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
    NECESSARY SERVICING, REPAIR, OR CORRECTION.

    IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
    WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
    REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE
    TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
    CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
    SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
    RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
    FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
    SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
    DAMAGES.

